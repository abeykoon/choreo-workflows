// Copyright (c) 2024 WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/time;

# Workflow definition for an action. This defines the behavior of the workflow
#
# + id - identifier of the workflow
# + name - name of the workflow
# + description - description of the workflow
# + approverTypes - list of approver types supported by the workflow
# + executeUponApproval - flag to indicate whether the action should be executed upon approval
# + allowParallelRequests - flag to indicate whether parallel requests are allowed. For conflicting actions,
#                           only one request can present in the org at a time
# + requestFormatSchema - schema to format the input data for the approval
public type Workflow record {|
    string id;
    string name;
    string description;
    ApproverType[] approverTypes;
    boolean executeUponApproval;
    boolean allowParallelRequests;
    map<FormatSchemaEntry> requestFormatSchema;
|};

# Workflow configuration for an action. This defines the configuration of the workflow.
# A workflow instance is created based on the configuration.
#
# + workflow - workflow definition
# + orgId - organization id
# + assigneeRoles - list of roles to assign the action
# + assignees - list of users to assign the action (user ids)
# + formatRequestData - flag to indicate whether the input data should be formatted before sending for approval
# based on the schema defined in the workflow definition. If false, the input data will be
# sent as it is.
# + externalWorkflowEngineEndpoint - endpoint of the external workflow engine to execute the workflow
public type OrgWorkflowConfig record {|
    Workflow workflow;
    string orgId;
    string[] assigneeRoles;
    string[] assignees;
    boolean formatRequestData = true;
    string externalWorkflowEngineEndpoint?;
|};

public type WorkflowInstance record {|
    string id;   // for a given action and resource, this is unique for a given org
    string orgId;
    * WorkflowInstanceCreateRequest;
    never data; //We get data separately
    OrgWorkflowConfig config;
    ReviewerDecisionRequest reviewerDecision?;
    WorkflowInstanceStatus status;
|};

# Request to create a workflow instance
#
# + 'resource - Unique identifier of the resource attached to the approval request. Generated by the client
# + action - Action to be performed on the resource
# + requestedBy - field description
# + requestComment - field description
# + data - field description
public type WorkflowInstanceCreateRequest record {|
    string 'resource;
    string action;
    string requestedBy; //get by JWT
    string requestComment?;
    json data;
|};

public type ReviewerDecisionRequest record {|
    string reviewedBy?;  // get by JWT
    ReviewerDecision decision;
    string reviewComment?;
|};

public type AuditEvent record {|
    AuditEventType eventType;
    time:Civil time;
    string user;
    * WorkflowInstance;
    never WorkflowConfig;
|};

# Schema instruction on how to format input data field to form
# data for the workflow
#
# + displayName - display name of the field
# + dataType - data type of the field
# + extractfrom - json path to extract the field from the input data
public type FormatSchemaEntry record {|
    string displayName;
    string dataType;
    string extractfrom;
|};

public type WorkflowInstanceCreateNotification record {|
    string id;
    * WorkflowInstanceCreateRequest;
|};

public type ReviewerDecision APPROVED|REJECTED;

public enum WorkflowInstanceStatus {
    DISABLED,
    PENDING,
    APPROVED,
    REJECTED,
    NOT_FOUND,
    TIMEOUT,
    CANCELLED
};

public enum ApproverType {
    ROLE,
    USER
};

public enum Action {
    CREATE,
    DELETE,
    UPDATE
};

public enum AuditEventType {
    REQUEST,
    APPROVE,
    REJECT,
    EXECUTE,
    CANCEL
};
